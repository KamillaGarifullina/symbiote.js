class t {
  constructor(t) {
    (this.uid = Symbol()),
      (this.name = t.name || null),
      t.schema.constructor === Object
        ? (this.store = (function (t) {
            let e = (t) => {
              for (let s in t) t[s]?.constructor === Object && (t[s] = e(t[s]));
              return { ...t };
            };
            return e(t);
          })(t.schema))
        : ((this._storeIsProxy = !0), (this.store = t.schema)),
      (this.callbackMap = Object.create(null));
  }
  static warn(t, e) {
    console.warn(`State: cannot ${t}. Prop name: ` + e);
  }
  read(e) {
    return this._storeIsProxy || this.store.hasOwnProperty(e) ? this.store[e] : (t.warn('read', e), null);
  }
  has(t) {
    return this._storeIsProxy ? void 0 !== this.store[t] : this.store.hasOwnProperty(t);
  }
  add(t, e, s = !0) {
    (!s && Object.keys(this.store).includes(t)) ||
      ((this.store[t] = e),
      this.callbackMap[t] &&
        this.callbackMap[t].forEach((e) => {
          e(this.store[t]);
        }));
  }
  pub(e, s) {
    this._storeIsProxy || this.store.hasOwnProperty(e) ? this.add(e, s) : t.warn('publish', e);
  }
  multiPub(t) {
    for (let e in t) this.pub(e, t[e]);
  }
  notify(t) {
    this.callbackMap[t] &&
      this.callbackMap[t].forEach((e) => {
        e(this.store[t]);
      });
  }
  sub(e, s, r = !0) {
    return this._storeIsProxy || this.store.hasOwnProperty(e)
      ? (this.callbackMap[e] || (this.callbackMap[e] = new Set()),
        this.callbackMap[e].add(s),
        r && s(this.store[e]),
        {
          remove: () => {
            this.callbackMap[e].delete(s), this.callbackMap[e].size || delete this.callbackMap[e];
          },
          callback: s,
        })
      : (t.warn('subscribe', e), null);
  }
  remove() {
    delete t.globalStore[this.uid];
  }
  static registerLocalCtx(e) {
    let s = new t({ schema: e });
    return (t.globalStore[s.uid] = s), s;
  }
  static registerNamedCtx(e, s) {
    let r = t.globalStore[e];
    return r ? console.warn('State: context name "' + e + '" already in use') : ((r = new t({ name: e, schema: s })), (t.globalStore[e] = r)), r;
  }
  static clearNamedCtx(e) {
    delete t.globalStore[e];
  }
  static getNamedCtx(e, s = !0) {
    return t.globalStore[e] || (s && console.warn('State: wrong context name - "' + e + '"'), null);
  }
}
t.globalStore = Object.create(null);
const e = Object.freeze({
    BIND_ATTR: 'set',
    ATTR_BIND_PRFX: '@',
    EXT_DATA_CTX_PRFX: '*',
    NAMED_DATA_CTX_SPLTR: '/',
    CTX_NAME_ATTR: 'ctx-name',
    CSS_CTX_PROP: '--ctx-name',
    EL_REF_ATTR: 'ref',
    AUTO_TAG_PRFX: 'sym',
  }),
  s = '1234567890QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm',
  r = s.length - 1;
var i = [
  function (t, e) {
    if (e.renderShadow) return;
    let s = [...t.querySelectorAll('slot')];
    if (e.__initChildren.length && s.length) {
      let t = {};
      s.forEach((e) => {
        let s = e.getAttribute('name');
        s ? (t[s] = { slot: e, fr: document.createDocumentFragment() }) : (t.__default__ = { slot: e, fr: document.createDocumentFragment() });
      }),
        e.__initChildren.forEach((e) => {
          let s = e.getAttribute?.('slot');
          s ? t[s].fr.appendChild(e) : t.__default__ && t.__default__.fr.appendChild(e);
        }),
        Object.values(t).forEach((t) => {
          t.slot.parentNode.insertBefore(t.fr, t.slot), t.slot.remove();
        });
    } else e.innerHTML = '';
  },
  function (t, s) {
    [...t.querySelectorAll(`[${e.EL_REF_ATTR}]`)].forEach((t) => {
      let r = t.getAttribute(e.EL_REF_ATTR);
      (s.ref[r] = t), t.removeAttribute(e.EL_REF_ATTR);
    });
  },
  function (t, s) {
    [...t.querySelectorAll(`[${e.BIND_ATTR}]`)].forEach((t) => {
      t
        .getAttribute(e.BIND_ATTR)
        .split(';')
        .forEach((r) => {
          if (!r) return;
          let i,
            a = r.split(':').map((t) => t.trim()),
            o = a[0];
          0 === o.indexOf(e.ATTR_BIND_PRFX) && ((i = !0), (o = o.replace(e.ATTR_BIND_PRFX, '')));
          let l,
            c,
            n,
            h,
            _ = a[1].split(',').map((t) => t.trim());
          if (o.includes('.')) {
            l = !0;
            let e = o.split('.');
            (h = () => {
              (c = t),
                e.forEach((t, s) => {
                  s < e.length - 1 ? (c = c[t]) : (n = t);
                });
            }),
              h();
          }
          for (let e of _)
            s.sub(e, (e) => {
              i
                ? e?.constructor === Boolean
                  ? e
                    ? t.setAttribute(o, '')
                    : t.removeAttribute(o)
                  : t.setAttribute(o, e)
                : l
                ? c
                  ? (c[n] = e)
                  : window.setTimeout(() => {
                      h(), (c[n] = e);
                    })
                : (t[o] = e);
            });
        }),
        t.removeAttribute(e.BIND_ATTR);
    });
  },
];
let a = 0;
class o extends HTMLElement {
  render(t, e = this.renderShadow) {
    let s;
    if (t || this.constructor.template) {
      for (
        this.constructor.template && !this.constructor.__tpl && ((this.constructor.__tpl = document.createElement('template')), (this.constructor.__tpl.innerHTML = this.constructor.template));
        this.firstChild;

      )
        this.firstChild.remove();
      if (t?.constructor === DocumentFragment) s = t;
      else if (t?.constructor === String) {
        let e = document.createElement('template');
        (e.innerHTML = t), (s = e.content.cloneNode(!0));
      } else this.constructor.__tpl && (s = this.constructor.__tpl.content.cloneNode(!0));
      for (let t of this.tplProcessors) t(s, this);
    }
    e ? (this.shadowRoot || this.attachShadow({ mode: 'open' }), s && this.shadowRoot.appendChild(s)) : s && this.appendChild(s);
  }
  addTemplateProcessor(t) {
    this.tplProcessors.add(t);
  }
  constructor() {
    super(),
      (this.init$ = Object.create(null)),
      (this.tplProcessors = new Set()),
      (this.ref = Object.create(null)),
      (this.allSubs = new Set()),
      (this.pauseRender = !1),
      (this.renderShadow = !1),
      (this.readyToDestroy = !0);
  }
  get autoCtxName() {
    return (
      this.__autoCtxName ||
        ((this.__autoCtxName = class {
          static generate(t = 'XXXXXXXXX-XXX') {
            let e = '';
            for (let i = 0; i < t.length; i++) e += '-' === t[i] ? t[i] : s.charAt(Math.random() * r);
            return e;
          }
        }.generate()),
        this.style.setProperty(e.CSS_CTX_PROP, `'${this.__autoCtxName}'`)),
      this.__autoCtxName
    );
  }
  get cssCtxName() {
    return this.getCssData(e.CSS_CTX_PROP, !0);
  }
  get ctxName() {
    return this.getAttribute(e.CTX_NAME_ATTR)?.trim() || this.cssCtxName || this.autoCtxName;
  }
  get localCtx() {
    return this.__localCtx || (this.__localCtx = t.registerLocalCtx({})), this.__localCtx;
  }
  get nodeCtx() {
    return t.getNamedCtx(this.ctxName, !1) || t.registerNamedCtx(this.ctxName, {});
  }
  static __parseProp(s, r) {
    let i, a;
    if (s.startsWith(e.EXT_DATA_CTX_PRFX)) (i = r.nodeCtx), (a = s.replace(e.EXT_DATA_CTX_PRFX, ''));
    else if (s.includes(e.NAMED_DATA_CTX_SPLTR)) {
      let r = s.split(e.NAMED_DATA_CTX_SPLTR);
      (i = t.getNamedCtx(r[0])), (a = r[1]);
    } else (i = r.localCtx), (a = s);
    return { ctx: i, name: a };
  }
  sub(t, e) {
    let s = o.__parseProp(t, this);
    this.allSubs.add(s.ctx.sub(s.name, e));
  }
  notify(t) {
    let e = o.__parseProp(t, this);
    e.ctx.notify(e.name);
  }
  has(t) {
    let e = o.__parseProp(t, this);
    return e.ctx.has(e.name);
  }
  add(t, e) {
    let s = o.__parseProp(t, this);
    s.ctx.add(s.name, e, !1);
  }
  add$(t) {
    for (let e in t) this.add(e, t[e]);
  }
  get $() {
    if (!this.__stateProxy) {
      let t = Object.create(null);
      this.__stateProxy = new Proxy(t, {
        set: (t, e, s) => {
          let r = o.__parseProp(e, this);
          return r.ctx.pub(r.name, s), !0;
        },
        get: (t, e) => {
          let s = o.__parseProp(e, this);
          return s.ctx.read(s.name);
        },
      });
    }
    return this.__stateProxy;
  }
  set$(t) {
    for (let e in t) this.$[e] = t[e];
  }
  initCallback() {}
  __initDataCtx() {
    let s = this.constructor.__attrDesc;
    if (s) for (let t of Object.values(s)) Object.keys(this.init$).includes(t) || (this.init$[t] = '');
    for (let s in this.init$)
      if (s.startsWith(e.EXT_DATA_CTX_PRFX)) this.nodeCtx.add(s.replace(e.EXT_DATA_CTX_PRFX, ''), this.init$[s]);
      else if (s.includes(e.NAMED_DATA_CTX_SPLTR)) {
        let r = s.split(e.NAMED_DATA_CTX_SPLTR),
          i = r[0].trim(),
          a = r[1].trim();
        if (i && a) {
          let e = t.getNamedCtx(i, !1);
          e || (e = t.registerNamedCtx(i, {})), e.add(a, this.init$[s]);
        }
      } else this.localCtx.add(s, this.init$[s]);
    this.__dataCtxInitialized = !0;
  }
  connectedCallback() {
    if ((this.__disconnectTimeout && window.clearTimeout(this.__disconnectTimeout), !this.connectedOnce)) {
      let t = this.getAttribute(e.CTX_NAME_ATTR)?.trim();
      t && this.style.setProperty(e.CSS_CTX_PROP, `'${t}'`), this.__initDataCtx(), (this.__initChildren = [...this.childNodes]);
      for (let t of i) this.addTemplateProcessor(t);
      this.pauseRender || this.render(), this.initCallback?.();
    }
    this.connectedOnce = !0;
  }
  destroyCallback() {}
  disconnectedCallback() {
    this.dropCssDataCache(),
      this.readyToDestroy &&
        (this.__disconnectTimeout && window.clearTimeout(this.__disconnectTimeout),
        (this.__disconnectTimeout = window.setTimeout(() => {
          this.destroyCallback();
          for (let t of this.allSubs) t.remove(), this.allSubs.delete(t);
          for (let t of this.tplProcessors) this.tplProcessors.delete(t);
        }, 100)));
  }
  static reg(t, s = !1) {
    t || (a++, (t = `${e.AUTO_TAG_PRFX}-${a}`)),
      (this.__tag = t),
      window.customElements.get(t) ? console.warn(`${t} - is already in "customElements" registry`) : window.customElements.define(t, s ? class extends this {} : this);
  }
  static get is() {
    return this.__tag || this.reg(), this.__tag;
  }
  static bindAttributes(t) {
    (this.observedAttributes = Object.keys(t)), (this.__attrDesc = t);
  }
  attributeChangedCallback(t, e, s) {
    if (e === s) return;
    let r = this.constructor.__attrDesc[t];
    r ? (this.__dataCtxInitialized ? (this.$[r] = s) : (this.init$[r] = s)) : (this[t] = s);
  }
  getCssData(t, e = !1) {
    if ((this.__cssDataCache || (this.__cssDataCache = Object.create(null)), !Object.keys(this.__cssDataCache).includes(t))) {
      this.__computedStyle || (this.__computedStyle = window.getComputedStyle(this));
      let s = this.__computedStyle.getPropertyValue(t).trim();
      s.startsWith("'") && s.endsWith("'") && (s = s.replace(/\'/g, '"'));
      try {
        this.__cssDataCache[t] = JSON.parse(s);
      } catch (s) {
        !e && console.warn(`CSS Data error: ${t}`), (this.__cssDataCache[t] = null);
      }
    }
    return this.__cssDataCache[t];
  }
  dropCssDataCache() {
    (this.__cssDataCache = null), (this.__computedStyle = null);
  }
  defineAccessor(t, e, s) {
    let r = '__' + t;
    (this[r] = this[t]),
      Object.defineProperty(this, t, {
        set: (t) => {
          (this[r] = t),
            s
              ? window.setTimeout(() => {
                  e?.(t);
                })
              : e?.(t);
        },
        get: () => this[r],
      }),
      (this[t] = this[r]);
  }
}
export { o as BaseComponent };
